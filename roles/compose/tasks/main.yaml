- name: Copy Docker daemon.json
  ansible.builtin.copy:
    src: docker/daemon.json
    dest: /etc/docker/daemon.json
    owner: root
    group: root
    mode: 0644
  notify:
    - Restart Docker service

- name: Create volumes for services
  ansible.builtin.file:
    path: "/svc/volumes/{{ item }}"
    state: directory
    owner: root
    group: root
    mode: '0755'
  loop:
    - nginx
    - nginx/certs
    - nginx/conf.d
    - nginx/vhost.d
    - nginx/html
    - acme-companion
    - dovecot
    - mysql_mail_data
    - mysql_mail_init_db
    - roundcube_custom_config
    - postgres_roundcube_data
    - spamass_vhome
    - gitea_data
    - gitea_entrypoint
    - postgres_gitea_data

- name: Create volume for mail service (different uid/gid)
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: 1000
    group: 8
    mode: '0755'
  loop:
    - /svc/volumes/mail

- name: Create volume for mail spool (different uid/gid)
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: 101
    group: 101
    mode: '0755'
  loop:
    - /svc/volumes/mail_spool

- name: Create Docker compose files directory
  ansible.builtin.file:
    path: /var/run/docker_compose_files
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Create Docker compose directories
  ansible.builtin.file:
    path: /var/run/docker_compose/services/stack
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Copy nginx.tmpl
  ansible.builtin.copy:
    src: nginx.tmpl
    dest: /svc/volumes/nginx/nginx.tmpl
    owner: root
    group: root
    mode: 0644

- name: Copy services compose
  ansible.builtin.copy:
    src: stack.yml
    dest: /var/run/docker_compose/services/stack/docker_compose.yml
    owner: root
    group: root
    mode: 0644

- name: Copy dovecot configuration
  ansible.builtin.copy:
    src: dovecot/
    dest: /svc/volumes/dovecot
    owner: root
    group: root
    mode: 0644
  notify:
    - Refresh Dovecot

- name: Copy roundcube custom configuration
  ansible.builtin.copy:
    src: roundcube_custom.inc.php
    dest: /svc/volumes/roundcube_custom_config
    owner: root
    group: root
    mode: 0644
  notify:
    - Refresh Roundcube
    - Refresh nginx-proxy

- name: Copy Gitea entrypoint
  ansible.builtin.copy:
    src: gitea.entrypoint.sh
    dest: /svc/volumes/gitea_entrypoint/entrypoint
    owner: root
    group: root
    mode: 0755

# TODO: This will fail if the stack is running already and secrets shall change
- name: Create Docker secrets
  docker_secret:
    name: "{{ item }}"
    # pack the data to avoid potential interpretation of the contents by Ansible
    data: "{{ lookup('file', 'secret_{{ item }}.txt') | b64encode }}"
    data_is_b64: true
    state: present
  loop:
    - mysql_mail_password
    - mysql_mail_user
    - mysql_mail_root_password
    - postfixadmin_setup_password
    - roundcube_db_user
    - roundcube_db_password
    - opendkim_key
    - gitea_db_user
    - gitea_db_password
    - gitea_mailer_user
    - gitea_mailer_password

- name: Template Dovecot SQL config
  ansible.builtin.template:
    src: dovecot/dovecot-sql.conf.ext.j2
    dest: /svc/volumes/dovecot/dovecot-sql.conf.ext
    owner: root
    group: root
    # this file contains a password. make it secure
    mode: u=r,g=,o=
  vars:
    mysql_mail_password: "{{ lookup('file', 'secret_mysql_mail_password.txt') }}"
    mysql_mail_user: "{{ lookup('file', 'secret_mysql_mail_user.txt') }}"
    vmail_user_id: "1000"
    mail_group_id: "8"
  notify:
    - Refresh Dovecot

- name: Template Dovecot Quota config
  ansible.builtin.template:
    src: dovecot/dovecot-dict-quota.conf.ext.j2
    dest: /svc/volumes/dovecot/dovecot-dict-quota.conf.ext
    owner: 101
    group: root
    # this file contains a password. make it secure
    mode: u=r,g=,o=
  vars:
    mysql_mail_password: "{{ lookup('file', 'secret_mysql_mail_password.txt') }}"
    mysql_mail_user: "{{ lookup('file', 'secret_mysql_mail_user.txt') }}"
  notify:
    - Refresh Dovecot

- name: Init swarm with default parameters
  docker_swarm:
    state: present

- name: Deploy services
  community.docker.docker_stack:
    state: present
    name: stack
    prune: yes
    compose: 
      - /var/run/docker_compose/services/stack/docker_compose.yml
  notify:
    - Refresh nginx-proxy
    - Reload Postfix

- name: Remove services
  community.docker.docker_stack:
    state: absent
    prune: yes
    name: mailserver
    compose:
      - /var/run/docker_compose/mailserver/docker-compose.yaml
  tags: [ never, docker_purge ]